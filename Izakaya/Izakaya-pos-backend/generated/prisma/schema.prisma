// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums for standardized fields
enum UserRole {
  admin
  manager
  server
  inventory_manager
}

enum OrderStatus {
  open
  closed
  cancelled
}

enum ItemStatus {
  ordered
  served
  cancelled
}

enum PaymentType {
  entire_order
  per_seat
  mixed
}

enum PaymentMethod {
  qr_scan
  cash
  card
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum TransactionType {
  stock_in
  stock_out
  adjustment
}

enum TableStatus {
  available
  occupied
  reserved
}

enum ReservationStatus {
  pending
  confirmed
  cancelled
  completed
}

model Courses {
  id          Int          @id @default(autoincrement()) @map("course_id")
  name        String
  description String?
  price       Float
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  orderItems  OrderItems[]

  @@map("courses")
}

model Categories {
  id             Int              @id @default(autoincrement()) @map("category_id")
  name           String
  description    String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  menuItems      MenuItems[]
  inventoryItems InventoryItems[]

  @@map("categories")
}

model MenuItems {
  id            Int          @id @default(autoincrement()) @map("item_id")
  name          String
  description   String?
  price         Float
  categoryId    Int          @map("category_id")
  isCourseItem  Boolean      @default(false) @map("is_course_item")
  isExtraItem   Boolean      @default(false) @map("is_extra_item")
  stockQuantity Int          @map("stock_quantity")
  isActive      Boolean      @default(true) @map("is_active")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  category      Categories   @relation(fields: [categoryId], references: [id])
  orderItems    OrderItems[]

  @@map("menu_items")
}

model Tables {
  id           Int            @id @default(autoincrement()) @map("table_id")
  tableNumber  Int            @map("table_number")
  capacity     Int
  status       TableStatus
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  orders       Orders[]
  reservations Reservations[]

  @@map("tables")
}

model Users {
  id                    Int                     @id @default(autoincrement()) @map("user_id")
  username              String                  @unique
  password              String
  name                  String
  role                  UserRole
  isActive              Boolean                 @default(true) @map("is_active")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  orders                Orders[]
  inventoryTransactions InventoryTransactions[]

  @@map("users")
}

model Orders {
  id                    Int                     @id @default(autoincrement()) @map("order_id")
  tableId               Int                     @map("table_id")
  serverId              Int                     @map("server_id")
  orderStatus           OrderStatus             @map("order_status")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  table                 Tables                  @relation(fields: [tableId], references: [id])
  server                Users                   @relation(fields: [serverId], references: [id])
  orderSeats            OrderSeats[]
  orderItems            OrderItems[]
  payments              Payments[]
  inventoryTransactions InventoryTransactions[]

  @@map("orders")
}

model OrderSeats {
  id             Int              @id @default(autoincrement()) @map("seat_id")
  orderId        Int              @map("order_id")
  seatNumber     Int              @map("seat_number")
  customerName   String?          @map("customer_name")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  order          Orders           @relation(fields: [orderId], references: [id])
  orderItems     OrderItems[]
  paymentDetails PaymentDetails[]

  @@map("order_seats")
}

model OrderItems {
  id         Int        @id @default(autoincrement()) @map("order_item_id")
  orderId    Int        @map("order_id")
  seatId     Int        @map("seat_id")
  itemId     Int        @map("item_id")
  courseId   Int?       @map("course_id")
  quantity   Int
  unitPrice  Float      @map("unit_price")
  itemStatus ItemStatus @map("item_status")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  order      Orders     @relation(fields: [orderId], references: [id])
  seat       OrderSeats @relation(fields: [seatId], references: [id])
  menuItem   MenuItems  @relation(fields: [itemId], references: [id])
  course     Courses?   @relation(fields: [courseId], references: [id])

  @@map("order_items")
}

model Payments {
  id             Int              @id @default(autoincrement()) @map("payment_id")
  orderId        Int              @map("order_id")
  paymentType    PaymentType      @map("payment_type")
  paymentMethod  PaymentMethod    @map("payment_method")
  totalAmount    Float            @map("total_amount")
  paymentStatus  PaymentStatus    @map("payment_status")
  qrCodeData     String?          @map("qr_code_data")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  order          Orders           @relation(fields: [orderId], references: [id])
  paymentDetails PaymentDetails[]

  @@map("payments")
}

model PaymentDetails {
  id              Int         @id @default(autoincrement()) @map("payment_detail_id")
  paymentId       Int         @map("payment_id")
  seatId          Int?        @map("seat_id")
  amount          Float
  isCoursePayment Boolean     @default(false) @map("is_course_payment")
  isExtraPayment  Boolean     @default(false) @map("is_extra_payment")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  payment         Payments    @relation(fields: [paymentId], references: [id])
  seat            OrderSeats? @relation(fields: [seatId], references: [id])

  @@map("payment_details")
}

model InventoryItems {
  id                    Int                     @id @default(autoincrement()) @map("inventory_item_id")
  name                  String
  description           String?
  categoryId            Int                     @map("category_id")
  quantity              Float
  unit                  String
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  category              Categories              @relation(fields: [categoryId], references: [id])
  inventoryTransactions InventoryTransactions[]

  @@map("inventory_items")
}

model InventoryTransactions {
  id              Int             @id @default(autoincrement()) @map("transaction_id")
  inventoryItemId Int             @map("inventory_item_id")
  quantityChange  Float           @map("quantity_change")
  transactionType TransactionType @map("transaction_type")
  relatedOrderId  Int?            @map("related_order_id")
  notes           String?
  createdById     Int             @map("created_by")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  inventoryItem   InventoryItems  @relation(fields: [inventoryItemId], references: [id])
  relatedOrder    Orders?         @relation(fields: [relatedOrderId], references: [id])
  createdBy       Users           @relation(fields: [createdById], references: [id])

  @@map("inventory_transactions")
}

model Reservations {
  id              Int               @id @default(autoincrement()) @map("reservation_id")
  customerName    String            @map("customer_name")
  contactNumber   String            @map("contact_number")
  email           String?
  partySize       Int               @map("party_size")
  reservationTime DateTime          @map("reservation_time")
  tableId         Int?              @map("table_id")
  status          ReservationStatus
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  table           Tables?           @relation(fields: [tableId], references: [id])

  @@map("reservations")
}
