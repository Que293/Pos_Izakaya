
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  pin: 'pin',
  role: 'role',
  fullName: 'fullName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  active: 'active'
};

exports.Prisma.TableScalarFieldEnum = {
  id: 'id',
  tableNumber: 'tableNumber',
  capacity: 'capacity',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  active: 'active'
};

exports.Prisma.SeatScalarFieldEnum = {
  id: 'id',
  seatNumber: 'seatNumber',
  status: 'status',
  tableId: 'tableId'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  customerName: 'customerName',
  phoneNumber: 'phoneNumber',
  partySize: 'partySize',
  reservationTime: 'reservationTime',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tableId: 'tableId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  courseId: 'courseId',
  menuItemId: 'menuItemId'
};

exports.Prisma.MenuCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  displayOrder: 'displayOrder',
  active: 'active'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  imageUrl: 'imageUrl',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  status: 'status',
  notes: 'notes',
  hasCourse: 'hasCourse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  seatId: 'seatId',
  courseId: 'courseId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orderId: 'orderId',
  menuItemId: 'menuItemId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  amount: 'amount',
  method: 'method',
  status: 'status',
  transactionRef: 'transactionRef',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orderId: 'orderId',
  userId: 'userId'
};

exports.Prisma.InventoryCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  unit: 'unit',
  quantityInStock: 'quantityInStock',
  alertThreshold: 'alertThreshold',
  costPerUnit: 'costPerUnit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.MenuItemIngredientScalarFieldEnum = {
  id: 'id',
  quantityRequired: 'quantityRequired',
  menuItemId: 'menuItemId',
  inventoryItemId: 'inventoryItemId'
};

exports.Prisma.InventoryTransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  quantity: 'quantity',
  notes: 'notes',
  createdAt: 'createdAt',
  inventoryItemId: 'inventoryItemId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  pin: 'pin',
  fullName: 'fullName',
  email: 'email',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.TableOrderByRelevanceFieldEnum = {
  id: 'id',
  tableNumber: 'tableNumber'
};

exports.Prisma.SeatOrderByRelevanceFieldEnum = {
  id: 'id',
  seatNumber: 'seatNumber',
  tableId: 'tableId'
};

exports.Prisma.ReservationOrderByRelevanceFieldEnum = {
  id: 'id',
  customerName: 'customerName',
  phoneNumber: 'phoneNumber',
  notes: 'notes',
  status: 'status',
  tableId: 'tableId'
};

exports.Prisma.CourseOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.CourseItemOrderByRelevanceFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  menuItemId: 'menuItemId'
};

exports.Prisma.MenuCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.MenuItemOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  categoryId: 'categoryId'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  notes: 'notes',
  userId: 'userId',
  seatId: 'seatId',
  courseId: 'courseId'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  id: 'id',
  notes: 'notes',
  orderId: 'orderId',
  menuItemId: 'menuItemId'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  transactionRef: 'transactionRef',
  notes: 'notes',
  orderId: 'orderId',
  userId: 'userId'
};

exports.Prisma.InventoryCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.InventoryItemOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  unit: 'unit',
  categoryId: 'categoryId'
};

exports.Prisma.MenuItemIngredientOrderByRelevanceFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  inventoryItemId: 'inventoryItemId'
};

exports.Prisma.InventoryTransactionOrderByRelevanceFieldEnum = {
  id: 'id',
  notes: 'notes',
  inventoryItemId: 'inventoryItemId'
};
exports.UserRole = exports.$Enums.UserRole = {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF'
};

exports.TableStatus = exports.$Enums.TableStatus = {
  AVAILABLE: 'AVAILABLE',
  RESERVED: 'RESERVED',
  OCCUPIED: 'OCCUPIED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PREPARING: 'PREPARING',
  SERVED: 'SERVED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  QR_CODE: 'QR_CODE',
  MOBILE_BANKING: 'MOBILE_BANKING'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  REFUNDED: 'REFUNDED',
  FAILED: 'FAILED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  STOCK_IN: 'STOCK_IN',
  STOCK_OUT: 'STOCK_OUT',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Table: 'Table',
  Seat: 'Seat',
  Reservation: 'Reservation',
  Course: 'Course',
  CourseItem: 'CourseItem',
  MenuCategory: 'MenuCategory',
  MenuItem: 'MenuItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Payment: 'Payment',
  InventoryCategory: 'InventoryCategory',
  InventoryItem: 'InventoryItem',
  MenuItemIngredient: 'MenuItemIngredient',
  InventoryTransaction: 'InventoryTransaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
